// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables with fallback to cloud production values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://ipizfawpzzwdltcbskim.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlwaXpmYXdwenp3ZGx0Y2Jza2ltIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTg0MDEwNTQsImV4cCI6MjAzMzk3NzA1NH0.DYOrE7D3-YurEMsAfT0LZ6o7nnS2TS7oQIEYcJQ_fpo";

// Service role key for admin operations (get this from your Supabase project settings -> API)
const SUPABASE_SERVICE_ROLE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

// Create singleton instances to prevent multiple GoTrueClient instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;
let supabaseAdminInstance: ReturnType<typeof createClient<Database>> | null = null;

// Regular client for normal operations - singleton pattern
export const supabase = (() => {
  if (!supabaseInstance) {
    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        storage: localStorage,
        storageKey: 'sb-shield-crm-auth', // Use unique storage key to prevent conflicts
        detectSessionInUrl: true,
        flowType: 'pkce'
      },
      global: {
        headers: {
          'x-application-name': 'shield-crm',
          'x-client-info': 'shield-crm-v1.0'
        }
      }
    });
  }
  return supabaseInstance;
})();

// Admin client for server-side operations (creating users, etc.) - singleton pattern
export const supabaseAdmin = (() => {
  if (!SUPABASE_SERVICE_ROLE_KEY) {
    console.warn('VITE_SUPABASE_SERVICE_ROLE_KEY not set - admin operations will not work');
    return null;
  }
  
  if (!supabaseAdminInstance) {
    supabaseAdminInstance = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      },
      global: {
        headers: {
          'x-application-name': 'shield-crm-admin'
        }
      }
    });
  }
  return supabaseAdminInstance;
})();

// Export utility functions for better error handling
export const handleSupabaseError = (error: any, operation: string = 'database operation') => {
  console.error(`Supabase error during ${operation}:`, error);
  
  if (error?.code === 'PGRST116') {
    return { error: 'No data found', details: error };
  }
  
  if (error?.code === '42501') {
    return { error: 'Insufficient permissions', details: error };
  }
  
  if (error?.message?.includes('JWT expired')) {
    return { error: 'Session expired, please login again', details: error };
  }
  
  return { error: error?.message || 'An unexpected error occurred', details: error };
};

// Check if user is authenticated and has valid session
export const checkAuth = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) {
      console.error('Auth check error:', error);
      return { isAuthenticated: false, session: null, error };
    }
    return { isAuthenticated: !!session, session, error: null };
  } catch (error) {
    console.error('Auth check failed:', error);
    return { isAuthenticated: false, session: null, error };
  }
};

// Import the supabase client like this:
// import { supabase, supabaseAdmin, handleSupabaseError, checkAuth } from "@/integrations/supabase/client";