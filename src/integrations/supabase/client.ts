// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables with fallback to cloud production values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://ipizfawpzzwdltcbskim.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlwaXpmYXdwenp3ZGx0Y2Jza2ltIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTg0MDEwNTQsImV4cCI6MjAzMzk3NzA1NH0.DYOrE7D3-YurEMsAfT0LZ6o7nnS2TS7oQIEYcJQ_fpo";

// Service role key for admin operations (get this from your Supabase project settings -> API)
const SUPABASE_SERVICE_ROLE_KEY = import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

// Global singleton to completely prevent multiple GoTrueClient instances
declare global {
  interface Window {
    __SHIELD_CRM_SUPABASE__?: ReturnType<typeof createClient<Database>>;
    __SHIELD_CRM_SUPABASE_ADMIN__?: ReturnType<typeof createClient<Database>>;
  }
}

// Regular client for normal operations - ULTRA-STRICT global singleton
export const supabase = (() => {
  // IMMEDIATE check - prevent any duplication
  if (typeof window !== 'undefined') {
    if (window.__SHIELD_CRM_SUPABASE__) {
      console.log('🔄 Reusing existing Supabase client instance');
      return window.__SHIELD_CRM_SUPABASE__;
    }
  }
  
  console.log('🆕 Creating new Supabase client instance');
  
  const instance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage,  
      storageKey: 'sb-shield-crm-auth-v5', // Latest version to clear conflicts
      detectSessionInUrl: true,
      flowType: 'pkce'
    },
    global: {
      headers: {
        'x-application-name': 'shield-crm-v5',
        'x-client-info': 'shield-crm-ultra-singleton',
        'x-timestamp': Date.now().toString()
      }
    },
    // Optimize realtime settings
    realtime: {
      params: {
        eventsPerSecond: 10,
        log_level: 'info'
      }
    }
  });

  // Example of how to monitor a channel for debugging:
  /*
  const channel = supabase.channel('some-channel-name');
  channel
    .on('postgres_changes', { event: '*', schema: 'public' }, payload => {
      console.log('Change received!', payload)
    })
    .subscribe(status => {
      if (status === 'SUBSCRIBED') {
        console.log('✅ Realtime channel subscribed!')
      }
      if (status === 'CHANNEL_ERROR') {
        console.error('❌ Realtime channel error')
      }
      if (status === 'TIMED_OUT') {
        console.log('⏰ Realtime channel timed out')
      }
    })
  */
  
  // Store in global location to prevent duplication
  if (typeof window !== 'undefined') {
    window.__SHIELD_CRM_SUPABASE__ = instance;
    console.log('✅ Supabase client stored globally');
  }
  
  return instance;
})();

// Admin client for server-side operations - strict global singleton  
export const supabaseAdmin = (() => {
  if (!SUPABASE_SERVICE_ROLE_KEY) {
    console.warn('VITE_SUPABASE_SERVICE_ROLE_KEY not set - admin operations will not work');
    return null;
  }
  
  // If already exists in window, return it immediately
  if (typeof window !== 'undefined' && window.__SHIELD_CRM_SUPABASE_ADMIN__) {
    return window.__SHIELD_CRM_SUPABASE_ADMIN__;
  }
  
  const adminInstance = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    },
    global: {
      headers: {
        'x-application-name': 'shield-crm-admin-v3',
        'x-client-info': 'shield-crm-admin-singleton'
      }
    }
  });
  
  // Store globally to prevent multiple instances
  if (typeof window !== 'undefined') {
    window.__SHIELD_CRM_SUPABASE_ADMIN__ = adminInstance;
  }
  
  return adminInstance;
})();

// Export utility functions for better error handling
export const handleSupabaseError = (error: any, operation: string = 'database operation') => {
  console.error(`Supabase error during ${operation}:`, error);
  
  if (error?.code === 'PGRST116') {
    return { error: 'No data found', details: error };
  }
  
  if (error?.code === '42501') {
    return { error: 'Insufficient permissions', details: error };
  }
  
  if (error?.message?.includes('JWT expired')) {
    return { error: 'Session expired, please login again', details: error };
  }
  
  return { error: error?.message || 'An unexpected error occurred', details: error };
};

// Check if user is authenticated and has valid session
export const checkAuth = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) {
      console.error('Auth check error:', error);
      return { isAuthenticated: false, session: null, error };
    }
    return { isAuthenticated: !!session, session, error: null };
  } catch (error) {
    console.error('Auth check failed:', error);
    return { isAuthenticated: false, session: null, error };
  }
};

// Import the supabase client like this:
// import { supabase, supabaseAdmin, handleSupabaseError, checkAuth } from "@/integrations/supabase/client";